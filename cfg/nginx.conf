worker_processes  1;

events {
  worker_connections  1024;
}

http {
  default_type  application/octet-stream;
  sendfile        off;
  keepalive_timeout  65;
  gzip  on;

  upstream database {
    postgres_server  127.0.0.1:5777 dbname=test user=test password=test;
    postgres_keepalive max=50 mode=multi;
  }

  server {
    listen       7777;
    server_name  localhost;
    expires      off;

    root WEBROOT;


    location / {
      index  index.html index.htm;
    }

    location /pgg {
      #internal;
      postgres_pass   database;
      postgres_escape $epgreq  $pgreq;
      postgres_query  "SELECT app.web($epgreq)";
      postgres_output  value;
    }

    location /log {
      default_type text/html;
      content_by_lua '
        local f = io.open("FHIR_ROOT/fhir-demo-deploy.log", "rb")
        local content = f:read("*all")
        f:close()
        ngx.say("<h1>Last deploy log:</h1><pre>" .. content .. "</pre>")
      ';
    }

    location /data {
        default_type text/html;
        set $pgreq '{}';
        content_by_lua '
           local cjson = require("cjson")
           local req = {}
           req["meth"] =  ngx.req.get_method()
           req["uri"] =  ngx.var.uri
           req["params"] =  ngx.req.get_uri_args()
           ngx.req.read_body()
           local body = ngx.req.get_body_data()
           if body then
             req["request_body"] = cjson.decode(body)
           end
           local pgreq = cjson.encode(req)

           local resp = ngx.location.capture("/pgg", {
               method = ngx.HTTP_GET, vars = { pgreq = pgreq }
           })

           if resp.status ~= ngx.HTTP_OK or not resp.body then
             error("failed to query pgsql")
           end

           ngx.header.content_type = "application/json; charset=utf-8"
           ngx.say(resp.body)
        ';
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }
}
